{"status":"ok","feed":{"url":"https://medium.com/feed/@men16922","title":"Stories by Byung Min Choi (Paul) on Medium","link":"https://medium.com/@men16922?source=rss-a16f5575a9a8------2","author":"","description":"Stories by Byung Min Choi (Paul) on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*1DB37W1ci34yyhFX9dqi9g.jpeg"},"items":[{"title":"Service Reliability and Risk Management","pubDate":"2025-05-04 16:13:49","link":"https://medium.com/@men16922/sre-service-reliable-engineering-%EC%86%8C%EA%B0%9C-fd5272d0bb7a?source=rss-a16f5575a9a8------2","guid":"https://medium.com/p/fd5272d0bb7a","author":"Byung Min Choi (Paul)","thumbnail":"","description":"\n<h3>1. Site Reliability and the Role of\u00a0SRE</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*RneqnZGe24pLZxlI.jpg\"></figure><h3>1.1 Overview of\u00a0SRE</h3>\n<p><strong>Site Reliability Engineering (SRE)</strong> is an engineering discipline that applies software development principles to the operation and automation of large-scale systems.<br> The goal of SRE is to maintain high availability and performance of services while continuously delivering new features.</p>\n<h3>1.2 SRE\uc758 \uc8fc\uc694\u00a0\uc6d0\uce59</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*esTNk1dRIkxBTHSf\"></figure><h3>1.2 Core Principles of\u00a0SRE</h3>\n<ul>\n<li>\n<strong>Automation</strong>: Automate repetitive tasks to enhance operational efficiency.</li>\n<li>\n<strong>Monitoring and Measurement</strong>: Track system performance and detect failures in real-time.</li>\n<li>\n<strong>Error Budget</strong>: Define acceptable failure rates through Service Level Objectives (SLOs) to balance reliability with deployment velocity.</li>\n<li>\n<strong>Postmortems and Continuous Improvement</strong>: Analyze incidents and implement improvements to prevent recurrence.</li>\n</ul>\n<p><strong>Example</strong>:<br><em>Google pioneered the SRE model in 2003 to manage the reliability of massive-scale systems like Search. By leveraging error budgets, Google ensures feature rollouts don\u2019t compromise user experience\u200a\u2014\u200amaintaining fast response times while deploying new updates\u00a0daily.</em></p>\n<h3>2. Service Levels and Reliability</h3>\n<p>To ensure service reliability, clear performance metrics must be defined. Key concepts include <strong>SLI (Service Level Indicator), SLO (Service Level Objective), and SLA (Service Level Agreement).</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*PnvN4LOGUj1lP56o\"></figure><h3>2.1 Service Level Indicator (SLI)</h3>\n<p>SLIs are quantitative metrics that reflect service performance. Common indicators include:</p>\n<ul>\n<li>\n<strong>Response Time</strong>: Time taken to handle a\u00a0request.</li>\n<li>\n<strong>Error Rate</strong>: Percentage of failed\u00a0requests</li>\n<li>\n<strong>Throughput</strong>: Number of requests handled per unit of\u00a0time.</li>\n<li>\n<strong>Availability</strong>: Percentage of time the system is operational.</li>\n<li>\n<strong>Durability</strong>: Ability to retain and retrieve data without\u00a0loss.</li>\n</ul>\n<p><strong>Example</strong>:<br><em>In an e-commerce site, response time for product search is tracked. An SLI might define success as maintaining an average response time below\u00a0200ms.</em></p>\n<blockquote>\n<em>SLI Formula Example:<br></em>SLI = (100 - Error Rate) *\u00a0100%</blockquote>\n<h3>2.2 Service Level Objective (SLO)</h3>\n<p>SLOs are target values for SLIs. Examples\u00a0include:</p>\n<ul>\n<li>99% of requests must complete within\u00a0100ms.</li>\n<li>System availability must exceed\u00a099.95%.</li>\n<li>HTTP success rate must be above\u00a099.9%.</li>\n</ul>\n<p><strong>Example</strong>:<br><em>Netflix sets an SLO of 99.99% availability for video streaming. Any buffering that exceeds 1 second is treated as an incident.</em>\ub2e4.</p>\n<h3>2.3 Service Level Agreement (SLA)</h3>\n<p>SLAs are formal contracts between service providers and customers. SLAs often specify compensations if the service fails to meet\u00a0SLOs.</p>\n<p><strong>Examples</strong>:</p>\n<ul>\n<li>A cloud provider guarantees 99.9% uptime and offers service credits for downtime.</li>\n<li>A vendor compensates customers if average response time exceeds\u00a0200ms.</li>\n</ul>\n<p><strong>Example</strong>:<br><em>AWS EC2 offers a 99.99% availability SLA. If this isn\u2019t met, users receive service credits as compensation.</em></p>\n<h3>3. Measuring and Managing Service Reliability</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*kjE2--kVBCny3pam.png\"></figure><h3>3.1 Selecting Key\u00a0Metrics</h3>\n<p>Different systems prioritize different indicators:</p>\n<ul>\n<li>\n<strong>UI-facing services</strong>: Focus on response time, availability, and throughput.</li>\n<li>\n<strong>Storage systems</strong>: Prioritize durability, response time, and availability.</li>\n<li>\n<strong>Big data pipelines</strong>: Emphasize throughput and end-to-end latency.</li>\n<li>\n<strong>All systems</strong>: Must ensure correctness.</li>\n</ul>\n<p><strong>Example</strong>:<br><em>In payment systems, response time and accuracy are critical. For instance, 95% of transactions should complete in under 2\u00a0seconds.</em></p>\n<h3>3.2 Metric Collection and\u00a0Analysis</h3>\n<p>Performance is monitored using:</p>\n<ul>\n<li><strong>Log analysis</strong></li>\n<li><strong>Monitoring platforms (e.g., Prometheus, CloudWatch)</strong></li>\n<li><strong>Distributed tracing (e.g., OpenTelemetry, Jaeger)</strong></li>\n<li><strong>Percentile-based metrics (e.g., P95, P99) for realistic performance insights</strong></li>\n</ul>\n<h3>3.3 Setting and Evaluating SLOs</h3>\n<p>Guiding principles:</p>\n<ul>\n<li>Don\u2019t base goals solely on current performance.</li>\n<li>Make goals achievable yet aspirational.</li>\n<li>Keep SLOs simple and manageable.</li>\n<li>Align them with actual user experience and business\u00a0value.</li>\n</ul>\n<h3>3.4 Responding to SLO Violations</h3>\n<ul>\n<li>Trigger alerts via monitoring tools.</li>\n<li>Scale infrastructure or adjust traffic\u00a0routing.</li>\n<li>Optimize service code and analyze root\u00a0causes.</li>\n<li>Delay feature rollouts if error budgets are exceeded.</li>\n</ul>\n<h3>4. Conclusion</h3>\n<p>Service reliability and risk management depend on well-defined metrics and structured goals.<br> SRE practices\u200a\u2014\u200abuilt around <strong>SLIs</strong>, <strong>SLOs</strong>, and <strong>SLAs</strong>\u200a\u2014\u200aenable teams to maintain system reliability while evolving the product.<br> By managing error budgets and continuously refining processes, teams can balance innovation with stability.<br> Ultimately, the goal of SRE is to deliver consistent, reliable service through proactive monitoring, automation, and continuous improvement.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=fd5272d0bb7a\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>1. Site Reliability and the Role of\u00a0SRE</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*RneqnZGe24pLZxlI.jpg\"></figure><h3>1.1 Overview of\u00a0SRE</h3>\n<p><strong>Site Reliability Engineering (SRE)</strong> is an engineering discipline that applies software development principles to the operation and automation of large-scale systems.<br> The goal of SRE is to maintain high availability and performance of services while continuously delivering new features.</p>\n<h3>1.2 SRE\uc758 \uc8fc\uc694\u00a0\uc6d0\uce59</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/0*esTNk1dRIkxBTHSf\"></figure><h3>1.2 Core Principles of\u00a0SRE</h3>\n<ul>\n<li>\n<strong>Automation</strong>: Automate repetitive tasks to enhance operational efficiency.</li>\n<li>\n<strong>Monitoring and Measurement</strong>: Track system performance and detect failures in real-time.</li>\n<li>\n<strong>Error Budget</strong>: Define acceptable failure rates through Service Level Objectives (SLOs) to balance reliability with deployment velocity.</li>\n<li>\n<strong>Postmortems and Continuous Improvement</strong>: Analyze incidents and implement improvements to prevent recurrence.</li>\n</ul>\n<p><strong>Example</strong>:<br><em>Google pioneered the SRE model in 2003 to manage the reliability of massive-scale systems like Search. By leveraging error budgets, Google ensures feature rollouts don\u2019t compromise user experience\u200a\u2014\u200amaintaining fast response times while deploying new updates\u00a0daily.</em></p>\n<h3>2. Service Levels and Reliability</h3>\n<p>To ensure service reliability, clear performance metrics must be defined. Key concepts include <strong>SLI (Service Level Indicator), SLO (Service Level Objective), and SLA (Service Level Agreement).</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*PnvN4LOGUj1lP56o\"></figure><h3>2.1 Service Level Indicator (SLI)</h3>\n<p>SLIs are quantitative metrics that reflect service performance. Common indicators include:</p>\n<ul>\n<li>\n<strong>Response Time</strong>: Time taken to handle a\u00a0request.</li>\n<li>\n<strong>Error Rate</strong>: Percentage of failed\u00a0requests</li>\n<li>\n<strong>Throughput</strong>: Number of requests handled per unit of\u00a0time.</li>\n<li>\n<strong>Availability</strong>: Percentage of time the system is operational.</li>\n<li>\n<strong>Durability</strong>: Ability to retain and retrieve data without\u00a0loss.</li>\n</ul>\n<p><strong>Example</strong>:<br><em>In an e-commerce site, response time for product search is tracked. An SLI might define success as maintaining an average response time below\u00a0200ms.</em></p>\n<blockquote>\n<em>SLI Formula Example:<br></em>SLI = (100 - Error Rate) *\u00a0100%</blockquote>\n<h3>2.2 Service Level Objective (SLO)</h3>\n<p>SLOs are target values for SLIs. Examples\u00a0include:</p>\n<ul>\n<li>99% of requests must complete within\u00a0100ms.</li>\n<li>System availability must exceed\u00a099.95%.</li>\n<li>HTTP success rate must be above\u00a099.9%.</li>\n</ul>\n<p><strong>Example</strong>:<br><em>Netflix sets an SLO of 99.99% availability for video streaming. Any buffering that exceeds 1 second is treated as an incident.</em>\ub2e4.</p>\n<h3>2.3 Service Level Agreement (SLA)</h3>\n<p>SLAs are formal contracts between service providers and customers. SLAs often specify compensations if the service fails to meet\u00a0SLOs.</p>\n<p><strong>Examples</strong>:</p>\n<ul>\n<li>A cloud provider guarantees 99.9% uptime and offers service credits for downtime.</li>\n<li>A vendor compensates customers if average response time exceeds\u00a0200ms.</li>\n</ul>\n<p><strong>Example</strong>:<br><em>AWS EC2 offers a 99.99% availability SLA. If this isn\u2019t met, users receive service credits as compensation.</em></p>\n<h3>3. Measuring and Managing Service Reliability</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*kjE2--kVBCny3pam.png\"></figure><h3>3.1 Selecting Key\u00a0Metrics</h3>\n<p>Different systems prioritize different indicators:</p>\n<ul>\n<li>\n<strong>UI-facing services</strong>: Focus on response time, availability, and throughput.</li>\n<li>\n<strong>Storage systems</strong>: Prioritize durability, response time, and availability.</li>\n<li>\n<strong>Big data pipelines</strong>: Emphasize throughput and end-to-end latency.</li>\n<li>\n<strong>All systems</strong>: Must ensure correctness.</li>\n</ul>\n<p><strong>Example</strong>:<br><em>In payment systems, response time and accuracy are critical. For instance, 95% of transactions should complete in under 2\u00a0seconds.</em></p>\n<h3>3.2 Metric Collection and\u00a0Analysis</h3>\n<p>Performance is monitored using:</p>\n<ul>\n<li><strong>Log analysis</strong></li>\n<li><strong>Monitoring platforms (e.g., Prometheus, CloudWatch)</strong></li>\n<li><strong>Distributed tracing (e.g., OpenTelemetry, Jaeger)</strong></li>\n<li><strong>Percentile-based metrics (e.g., P95, P99) for realistic performance insights</strong></li>\n</ul>\n<h3>3.3 Setting and Evaluating SLOs</h3>\n<p>Guiding principles:</p>\n<ul>\n<li>Don\u2019t base goals solely on current performance.</li>\n<li>Make goals achievable yet aspirational.</li>\n<li>Keep SLOs simple and manageable.</li>\n<li>Align them with actual user experience and business\u00a0value.</li>\n</ul>\n<h3>3.4 Responding to SLO Violations</h3>\n<ul>\n<li>Trigger alerts via monitoring tools.</li>\n<li>Scale infrastructure or adjust traffic\u00a0routing.</li>\n<li>Optimize service code and analyze root\u00a0causes.</li>\n<li>Delay feature rollouts if error budgets are exceeded.</li>\n</ul>\n<h3>4. Conclusion</h3>\n<p>Service reliability and risk management depend on well-defined metrics and structured goals.<br> SRE practices\u200a\u2014\u200abuilt around <strong>SLIs</strong>, <strong>SLOs</strong>, and <strong>SLAs</strong>\u200a\u2014\u200aenable teams to maintain system reliability while evolving the product.<br> By managing error budgets and continuously refining processes, teams can balance innovation with stability.<br> Ultimately, the goal of SRE is to deliver consistent, reliable service through proactive monitoring, automation, and continuous improvement.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=fd5272d0bb7a\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["sre"]}]}